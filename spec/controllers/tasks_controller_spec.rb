require 'spec_helper'
require 'capybara/rspec'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
describe TasksController do

  before(:each) do
    login_user
  end

  it "should have a current_user" do
    subject.current_user.should_not be_nil
  end
  it "should be success" do
    get 'index'
    response.should be_success
  end


  describe "GET edit" do
    before(:each) do
      @task = FactoryGirl.create(:task)
      session[:current_user] = @task.user_id
      @current_user = User.find_by_id(session[:current_user]) if session[:current_user]
    end
    it "assigns the requested task as @task" do
      get :edit, {:id => @task.user_id}
      assigns(:task).should eq(@task)
    end
    it "can't assigns the requested task as @task" do
      task = Task.new(:title => "HW2", :course => "Computer Science 169", :status => "New",
        :kind => "Homework", :due => "2015-03-07 07:59:00", :release => "2015-03-03 07:59:00", :user_id => 2)
      get :edit, {:id => task.user_id}
      response.should_not be_success
    end
  end


  describe "PUT update" do
    before(:each) do
      @task = FactoryGirl.create(:task)
      session[:current_user] = @task.user_id
      @current_user = User.find_by_id(session[:current_user]) if session[:current_user]
    end
    describe "with valid params" do
      it "updates the requested task" do
        @task.title = 'HW4'
        put :update, {:id => @task.user_id}
      end

      it "assigns the requested task as @task" do
        @task.title = 'HW4'
        put :update, {:id => @task.user_id}
        assigns(:task).should eq(@task)
      end

      it "redirects to the task" do
        @task.title = 'HW4'
        put :update, {:id => @task.user_id}
        response.should redirect_to(@task)
      end
      it "can't update" do
        put :update, {:id => @task.user_id}
        response.should_not be_success
      end
    end
  end

  #   describe "with invalid params" do
  #     it "assigns the task as @task" do
  #       task = Task.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Task.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => task.to_param, :task => { "title" => "invalid value" }}, valid_session
  #       assigns(:task).should eq(task)
  #     end

  #     it "re-renders the 'edit' template" do
  #       task = Task.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Task.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => task.to_param, :task => { "title" => "invalid value" }}, valid_session
  #       response.should render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE destroy", :pending => true do
  #   it "destroys the requested task" do
  #     task = Task.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => task.to_param}, valid_session
  #     }.to change(Task, :count).by(-1)
  #   end

  #   it "redirects to the tasks list" do
  #     task = Task.create! valid_attributes
  #     delete :destroy, {:id => task.to_param}, valid_session
  #     response.should redirect_to(tasks_url)
  #   end
  # end

end
